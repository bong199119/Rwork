a <- c(1:10000)
a
var1 <- 0 # var1 = 0
#java) int var1 = 0
var1 <- 1
var1
var2 <- 20
var3 <- 30
var2; var3
# 객체. 멤버
member.id <- "hong"
member.name <-"홍길동"
member.pwd <-"1234"
num <- 10
NUM <- 100
num; NUM
# scala(1) vs vector(n)
name <- c("홍길동","이순신","유관순")
name[2] # "이순신"
# 변수 목록
ls()
mode(int)
int <- 100 # 숫자형(연산, 차트)
string <- "대한민국" # ='대한민국'
boolean <- TRUE # T, FALSE(F)
mode(string)
mode(int)
mode(boolean)
# is.xxx()
is.numeric(int)
is.character(string)
is.numeric(boolean)
install.packages("stringr")
install.packages("stringr")
# 1. session 정보
# session : R의 실행환경
sessionInfo()
# 1) 줄단위 실행
a <-rnorm(n=20) # <- or =
a
hist(a)
mean(a)
# 2) 블럭단위 실행
getwd()#현재 잡업경로 볼 수 있음
pdf("test.pdf") # open
hist(a) # 히스토그램
dev.off() # close
# 2) 블럭단위 실행
getwd()#현재 잡업경로 볼 수 있음
# 사용가능한 패키지
dim(available.packages())
install.packages("stringr") #문자열처리
# 패키지 in memory
library(stringr)
#사용가능한 패키지 확인
search()
#설치 위치
.libPaths()
#패키지 활용
str <- "서봉석29이순신55유관순25알랙산더255"
str
# 이름 추출
str_extract_all(str,"[가-힣]{3}")
# 나이 추출
str_extract_all(str, "[0-9]{2}")
str_extract_all(str, "[0-9]{3}")
#패키지 삭제
remove.packages("stringr")
# 2) 데이터셋
data()
Nile
length(Nile) #[1] 100  -> 1차원, 데이터 100개
mode(Nile) # "numeric"
plot(Nile)
mean(Nile) # 919.35
# 1) 변수(variable) : 메모리 주소를 저장
# - R의 모든 변수는 객체(참조변수)
# - 변수 선언 시 type 없음
a <- c(1:10000)
a
var1 <- 0 # var1 = 0
#java) int var1 = 0
var1 <- 1
var1
var2 <- 20
var3 <- 30
var2; var3 # 두개 동시에 출력
# 객체. 멤버
member.id <- "hong"
# 객체. 멤버
member.id <- "hong"
member.name <-"홍길동"
member.pwd <-"1234"
num <- 10
NUM <- 100
num; NUM
# scala(1) vs vector(n)
name <- c("홍길동","이순신","유관순")
name #[1] "홍길동" "이순신" "유관순"
name[2] # "이순신"
# 변수 목록
ls()
int <- 100 # 숫자형(연산, 차트)
string <- "대한민국" # ='대한민국'
boolean <- TRUE # T, FALSE(F)
mode(int) # "numeric"
mode(string) # "character"
mode(boolean) # "logical"
# is.xxx()
is.numeric(int) # TRUE
is.character(string) # TRUE
is.numeric(boolean) # FALSE
X <- C(100,90,NA,65,78) # NA : 결측치(9999)
is.na(x)
# 1) 문자열 -> 숫자형
num <- c(10,20,30,40)
num
mode(num)
plot(num)
# 1) 문자열 -> 숫자형
num <- c(10,20,30,"40")
num
mode(num) #"numeric"
plot(num)
mean(num)
as.numeric(num)
plot(num)
num<-as.numeric(num)
mode(num)
mean(num)
plot(num)
gender <- c("M", "f", "M", "F", "M")
mode(gender)
plot(gender)
install.packages("stringr")
install.packages("stringr")
mode(fgender)
#요인형 변환 : 문자열 -> 요인형
fgender <- as.factor(gender)
mode(fgender)
fgender
str(fgender)
# Factor w/2 levels "F"(1), "M"(2) : 2 1 2 1 2
plot(fgender)
x <- c('M', 'F')
fgender2 <- factor(gender, levels = x)
str(fgender2)
# 1) 줄단위 실행
a <-rnorm(n=20) # <- or =
a
hist(a)
# 2) 블럭단위 실행
getwd()#현재 잡업경로 볼 수 있음
# mode vs class
# mode() : 자료형 반환
# class() : 자료구조 반환
mode(fgender) # "numeric"
class()
class(fgender)
# Factor형 고려사항
num <- c(4,2,4,2)
mode(num)
fnum <- as.factor(num)
fnum
plot(fnum)
str(fnum)
#요인형 -> 숫자형
num2 <- as.numeric(fnum)
num2 # 2 1
#숫자형 -> 요인형
fnum <- as.factor(num)
fnum
plot(fnum)
str(fnum)
#요인형 -> 문자형 -> 숫자형
snum <- as.character(fnum)
num2 <- as.numeric(snum)
num2 # 4 2 4 2
# 5.  기본함수 사용 및 작업공간
mean(10,20,30,40,50,60)
# 5.  기본함수 사용 및 작업공간
mean(10,20,30,40,50,60)
help(mean)
x <- c(10,20,30,40,50,60)
mean(x)
help(mean) # 함수를 알려주는 창을 띄워줌
# 5.  기본함수 사용 및 작업공간
mean(10,20,30,40,50,60, NA) #평균 - 10 파라미터가 잘못됨
x <- c(10,20,30,40,50,60, NA)
mean(x) # 35
mean(x) # 35
mean(x, na.rm = TRUE) # 35
help(mean) # 함수를 알려주는 창을 띄워줌
?mean
sum(x, na.rm = TRUE)
# 2) 작업공간
getwd()
setwd("c:/Rwork/data")
getwd()
test <- read.csv("test.csv")
test
str(test)
#01. 현재 작업 공간을 확인하고 "D:/Rwork/"로 변경하시오.
getwd()
setwd("c:/Rwork")
getWd()
#01. 현재 작업 공간을 확인하고 "D:/Rwork/"로 변경하시오.
getwd()
setwd("c:/Rwork")
#03. 다음 rain 변수는 비 유무를 나타내는 변수이다. 이 변수를 요인형으로 변경하시오.
rain <- c('YES', 'No', 'YES', 'YES', 'NO')
getWd()
# 2) 작업공간
getwd()
getwd()
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name <- 서봉석석
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
#03. 다음 rain 변수는 비 유무를 나타내는 변수이다. 이 변수를 요인형으로 변경하시오.
rain <- c('YES', 'No', 'YES', 'YES', 'NO')
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name <- 서봉석
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
#03. 다음 rain 변수는 비 유무를 나타내는 변수이다. 이 변수를 요인형으로 변경하시오.
rain <- c('YES', 'No', 'YES', 'YES', 'NO')
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name <- 서봉석
age <- 29
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name <- 서봉석
age <- 29
#조건1) name, age, address 변수에 자신의 이름, 나이, 주소를 만들고 출력한다.
name <- "서봉석"
age <- 29
address <- "을지로입구"
name; age; address
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name, age, address)
#조건2) mode() 함수를 이용하여 각 변수의 자료형(data type)을 확인한다.
mode(name)
?mode
mode(age)
mode(address)
rain <- as.numeric(rain)
rainn <- as.numeric(rain)
rainn
women <- read.csv("women.csv")
#04. R에서 제공하는 women 데이터 셋을 다음과 같이 처리하시오.
getwd()
setwd("c:/Rwork/data")
women <- read.csv("women.csv")
getwd()
setwd("c:/Rwork")
getwd()
data("women")
women
#조건3) plot() 함수를 이용하여 기본 차트 그리기
plot(women)
#05. R에서 제공하는 c()함수를 이용하여 벡터를 생성하고, 자료를 처리하시오.
num <- c(1,2,3,4,5,6,7,8,9,10)
num
#조건1) 1~10까지 벡터를 생성한다.
num
#조건2) 생성된 벡터를 대상으로 평균을 구한다.
mean(num)
frain <- as.factor(rain)
frain
class(frain)
mode(frain)
#조건1) women은 어떤 데이터 셋 인지를 쓰시오?
class(women)
mode(name); mode(age); mode(address)
str(frain)
#03. 다음 rain 변수는 비 유무를 나타내는 변수이다. 이 변수를 요인형으로 변경하시오.
rain <- c('YES', 'No', 'YES', 'YES', 'NO')
frain <- as.factor(rain)
class(frain) #factor
str(frain)
mode(women)
num <- c(1:10)
data()
# c()함수
x <- c(1:5)
x
y <- c(1,3,5)
y
seq(9, 1, by=-2)
# seq()
seq(1, 9, by=2) #(start, end, step)
rep(1:3, 3)
rep(1:3, each=3)
a <- c(1:100)
a
a[100]
a[50:60]
a[90:20]
length(a)
length(a[50:60])
a[length(a)-5]
a[length(a)-5 : length(a)]
start = length(a)-5
end = length(a)
a[start:end]
a[length(a)-5 : length(a)]
a[(length(a)-5) : length(a)]
a[a>=10&a<=50]
a[a>=10 & a<=50]
a[-5:100]
length(a)
a[(length(a)-5) : length(a)]
a[length(a)-5:length(a)]
a[100-5:100]
# matrix()
m1 <- matrix(c(1:9), nrow =3)
m1
dim(m1) # 3 3
x1 <- 1:5 #c(1:5)
x1
x2 <- 2:6
x1; x2
# rbind()
rbind(x1, x2)
# rbind()
m2 <-rbind(x1, x2)
m2
dim(m2)
m3 <- cbind(x1,x2)
m3
#matrix index
m3[row, col]
#matrix index
m3[1, 2]
m3[1,]
m3[,2]
#box
m2 [c(1:2),c(2:4)]
m2 [(1,2),(2,3,4)]
x <- matrix(1:9, nrow = 3, ncol = 3,byrow = TRUE)
x
colnames(x) <- c("one","two","three")
x
# broadcast 연산
x <- 1:10
x*0.5
y <- matrix(1:6, nrow = 2)
# 2) vector vs matrix
x <- 1:3
y <- matrix(1:6, nrow = 2)
dim(y)
y
z<- x*y
z
# 2) vector vs matrix
x <- 1:3
x
y <- matrix(1:6, nrow = 2)
y
z<- x*y
z
# apply() : 처리  행간 혹은 열간 합
apply(z, 1, sum)
apply(z, 2, mean)
apply(z,2,sum)
apply(z, 2, max)
arr <- array(1:12, c(3,2,2))
arr
dim(arr)
# apply() : 처리  행간 혹은 열간 합
apply(z, 1, sum)
arr <- array(1:12, c(3,2,2))
arr
dim(arr) #
data.frame(NO=no, Name=name, Age=age, Pay=pay)
no <- 1:3
name <- c("홍길동","이순신","유관순")
age <- c(35,45,25)
pay <- c(200,300,150)
data.frame(NO=no, Name=name, Age=age, Pay=pay)
#obj$column
epay <- emp$Pay
emp <- data.frame(NO=no, Name=name, Age=age, Pay=pay)
emp
#obj$column
epay <- emp$Pay
epay
var(epay)
sd(epay)
sqrt(var(epay))
sd(epay)
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
seq(1:10 by=3)
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
c(1:5)
seq(1,10 by=3)
seq(1,10, by=3)
seq(1:10, by=3)
seq(1,10, by=3)
seq
seq(25,-15, by = 5)
seq(25,-15, by=5)
seq(25,(-15), by=5)
seq(25,-15, by=5)
seq
seq(1,10, 3)
seq
seq
seq(1,10, 3)
seq
seq
seq(1,10, 3)
seq
vec2 <- seq(1,10, 3)
vec2
vec1 <- c(1:5)
vec3 <- c(vec1, vec2)
vec4 <- c(vec1, vec2)
vec4
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
vec3 <- rep("r", 5)
vec3
seq(25,-15, by=5)
m <- rbind(v1,v2)
m
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
v2 <- c(40,50,-30,7,10)
m <- rbind(v1,v2)
m
dim(m)
m<- cbind(v1,v2)
m
seq(25,-15, -5)
vec5 <- vec4[seq(1,length(vec4),2)]
vec5
apply(m,2,sum)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(name, age, gender,job,sat,grade,total)
name <-c("최민수","유관순", "이순신","김유신","홍길동")
age <-c(55,45,45,53,15) #연령
gender <-c(1,2,1,1,1) #1:남자, 2: 여자
job <-c("연예인","주부","군인","직장인","학생")
sat <-c(3,4,2,5,5) # 만족도
grade <- c("C","C","A","D","A")
total <-c(44.4,28.5,43.5,NA,27.1) #총구매금액(NA:결측치)
# <조건1> 위 7개 벡터를 user이름으로 데이터 프레임 생성
user <- data.frame(name, age, gender,job,sat,grade,total)
user
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
hist(user$total)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
plot(user$sat)
kor <- c(90,85,90)
eng <- c(70,85,75)
mat <- c(86,92,88)
# 조건1) 3개의 과목점수를 이용하여 데이터프레임(Data)을 생성한다.
data<- data.frame(kor,eng,mat)
data
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
apply(data,1,max)
apply(data,2,max)
# 조건3) 행/열 방향으로 mean()함수를 적용하여 평균 구하기(소숫점 2자리 까지 표현)
#  힌트 : round(data, 자릿수)
round(apply(data,1,mean),2)
round(apply(data,2,mean),2)
score <- c(90,85,83)
# 분산
var(score)
# 분산
var(score) # 13
# 표준편차 : 분산의 양의 제곱근
sd(score)
# 표준편차 : 분산의 양의 제곱근
sd(score) # 3.605551
sqrt(var(score))
sqrt(var(score)) # 3.605551
#분산 = sum((x-산술평균)^2) / n-1
avg <- mean(score) # 산술평균
diff <- (score - avg)
diff <- (score - avg)^2
diff
diff <- (score - avg)^2
diff_sum <- sum(diff)
var <- diff_sum / (length(score) - 1)
var
sd <- sqrt(var)
sd
# 1) key 생략 : [key =] value
list <- list('lee',"이순신",29,"hong","홍길동",45)
# key -> value 접근
list[[1]] -> "lee"의 키값
# key -> value 접근
list[[1]]  #-> "lee"의 key
list[[2]]  #-> "이순신"의 key
# index -> key:value 접근
list[4] # -> [[4]],  "hong"
install.packages("stringr")
library(stringr)
str <- "홍길동35이순신45"
str_extract_all(str, "[가-힣]{3}")
member = list(name = c("홍길순", "이순신"),
age = c(33,44),
gender = ㅊ("여","남"))
member
member = list(name = c("홍길순", "이순신"),
age = c(33,44),
gender = c("여","남"))
member
member$name[2]
# 조건4) 행 단위 분산과 표준편차 구하기
#  힌트 : var(), sd()
apply(Data, 1, var)
apply(Data, 1, sd)
